/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace NFTAuction {
  export type AuctionStruct = {
    owner: AddressLike;
    nftContract: AddressLike;
    tokenId: BigNumberish;
    startingPrice: BigNumberish;
    startTime: BigNumberish;
    endTime: BigNumberish;
    highestBidder: AddressLike;
    highestBid: BigNumberish;
    ended: boolean;
  };

  export type AuctionStructOutput = [
    owner: string,
    nftContract: string,
    tokenId: bigint,
    startingPrice: bigint,
    startTime: bigint,
    endTime: bigint,
    highestBidder: string,
    highestBid: bigint,
    ended: boolean
  ] & {
    owner: string;
    nftContract: string;
    tokenId: bigint;
    startingPrice: bigint;
    startTime: bigint;
    endTime: bigint;
    highestBidder: string;
    highestBid: bigint;
    ended: boolean;
  };
}

export interface NFTAuctionInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "NftContractAddress"
      | "auctionTokenIds"
      | "auctions"
      | "emergencyWithdrawERC20"
      | "emergencyWithdrawETH"
      | "endAuction"
      | "getAllAuctionTokenIds"
      | "getAllAuctionsDetails"
      | "getAuctionDetails"
      | "getListingFee"
      | "getNFTMetadata"
      | "getUserNFTs"
      | "innerAddress"
      | "listNFTForAuction"
      | "mintNFT"
      | "owner"
      | "paymentTokenAddress"
      | "placeBid"
      | "renounceOwnership"
      | "setListingFee"
      | "transferOwnership"
      | "userNFTs"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AuctionEnded"
      | "BidPlaced"
      | "EmergencyTokenWithdrawal"
      | "EmergencyWithdrawal"
      | "ListingFeeUpdated"
      | "NFTListed"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "NftContractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctionTokenIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "auctions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdrawERC20",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdrawETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "endAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllAuctionTokenIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllAuctionsDetails",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getListingFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNFTMetadata",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserNFTs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "innerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listNFTForAuction",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "mintNFT", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paymentTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "placeBid",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setListingFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userNFTs",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "NftContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionTokenIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "auctions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdrawERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdrawETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endAuction", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllAuctionTokenIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllAuctionsDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getListingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNFTMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "innerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listNFTForAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "placeBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setListingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userNFTs", data: BytesLike): Result;
}

export namespace AuctionEndedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    winner: AddressLike,
    winningBid: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    winner: string,
    winningBid: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    winner: string;
    winningBid: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BidPlacedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    bidder: AddressLike,
    bidAmount: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    bidder: string,
    bidAmount: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    bidder: string;
    bidAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyTokenWithdrawalEvent {
  export type InputTuple = [
    token: AddressLike,
    owner: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [token: string, owner: string, amount: bigint];
  export interface OutputObject {
    token: string;
    owner: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyWithdrawalEvent {
  export type InputTuple = [owner: AddressLike, amount: BigNumberish];
  export type OutputTuple = [owner: string, amount: bigint];
  export interface OutputObject {
    owner: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ListingFeeUpdatedEvent {
  export type InputTuple = [newListingFee: BigNumberish];
  export type OutputTuple = [newListingFee: bigint];
  export interface OutputObject {
    newListingFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NFTListedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    seller: AddressLike,
    listingFee: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    seller: string,
    listingFee: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    seller: string;
    listingFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface NFTAuction extends BaseContract {
  connect(runner?: ContractRunner | null): NFTAuction;
  waitForDeployment(): Promise<this>;

  interface: NFTAuctionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  NftContractAddress: TypedContractMethod<[], [string], "view">;

  auctionTokenIds: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  auctions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        boolean
      ] & {
        owner: string;
        nftContract: string;
        tokenId: bigint;
        startingPrice: bigint;
        startTime: bigint;
        endTime: bigint;
        highestBidder: string;
        highestBid: bigint;
        ended: boolean;
      }
    ],
    "view"
  >;

  emergencyWithdrawERC20: TypedContractMethod<
    [_token: AddressLike],
    [void],
    "nonpayable"
  >;

  emergencyWithdrawETH: TypedContractMethod<[], [void], "nonpayable">;

  endAuction: TypedContractMethod<
    [_tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getAllAuctionTokenIds: TypedContractMethod<[], [bigint[]], "view">;

  getAllAuctionsDetails: TypedContractMethod<
    [],
    [NFTAuction.AuctionStructOutput[]],
    "view"
  >;

  getAuctionDetails: TypedContractMethod<
    [_tokenId: BigNumberish],
    [NFTAuction.AuctionStructOutput],
    "view"
  >;

  getListingFee: TypedContractMethod<[], [bigint], "view">;

  getNFTMetadata: TypedContractMethod<
    [_tokenId: BigNumberish],
    [string],
    "view"
  >;

  getUserNFTs: TypedContractMethod<[], [bigint[]], "view">;

  innerAddress: TypedContractMethod<[], [bigint], "view">;

  listNFTForAuction: TypedContractMethod<
    [
      tokenId: BigNumberish,
      _startingPrice: BigNumberish,
      _startTime: BigNumberish,
      _duration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  mintNFT: TypedContractMethod<[], [void], "nonpayable">;

  owner: TypedContractMethod<[], [string], "view">;

  paymentTokenAddress: TypedContractMethod<[], [string], "view">;

  placeBid: TypedContractMethod<
    [_tokenId: BigNumberish, _bidAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setListingFee: TypedContractMethod<
    [_listingFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  userNFTs: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "NftContractAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "auctionTokenIds"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "auctions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        boolean
      ] & {
        owner: string;
        nftContract: string;
        tokenId: bigint;
        startingPrice: bigint;
        startTime: bigint;
        endTime: bigint;
        highestBidder: string;
        highestBid: bigint;
        ended: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdrawERC20"
  ): TypedContractMethod<[_token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyWithdrawETH"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "endAuction"
  ): TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllAuctionTokenIds"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getAllAuctionsDetails"
  ): TypedContractMethod<[], [NFTAuction.AuctionStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getAuctionDetails"
  ): TypedContractMethod<
    [_tokenId: BigNumberish],
    [NFTAuction.AuctionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getListingFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNFTMetadata"
  ): TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getUserNFTs"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "innerAddress"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "listNFTForAuction"
  ): TypedContractMethod<
    [
      tokenId: BigNumberish,
      _startingPrice: BigNumberish,
      _startTime: BigNumberish,
      _duration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintNFT"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paymentTokenAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "placeBid"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _bidAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setListingFee"
  ): TypedContractMethod<[_listingFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userNFTs"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getEvent(
    key: "AuctionEnded"
  ): TypedContractEvent<
    AuctionEndedEvent.InputTuple,
    AuctionEndedEvent.OutputTuple,
    AuctionEndedEvent.OutputObject
  >;
  getEvent(
    key: "BidPlaced"
  ): TypedContractEvent<
    BidPlacedEvent.InputTuple,
    BidPlacedEvent.OutputTuple,
    BidPlacedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyTokenWithdrawal"
  ): TypedContractEvent<
    EmergencyTokenWithdrawalEvent.InputTuple,
    EmergencyTokenWithdrawalEvent.OutputTuple,
    EmergencyTokenWithdrawalEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyWithdrawal"
  ): TypedContractEvent<
    EmergencyWithdrawalEvent.InputTuple,
    EmergencyWithdrawalEvent.OutputTuple,
    EmergencyWithdrawalEvent.OutputObject
  >;
  getEvent(
    key: "ListingFeeUpdated"
  ): TypedContractEvent<
    ListingFeeUpdatedEvent.InputTuple,
    ListingFeeUpdatedEvent.OutputTuple,
    ListingFeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "NFTListed"
  ): TypedContractEvent<
    NFTListedEvent.InputTuple,
    NFTListedEvent.OutputTuple,
    NFTListedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "AuctionEnded(uint256,address,uint256)": TypedContractEvent<
      AuctionEndedEvent.InputTuple,
      AuctionEndedEvent.OutputTuple,
      AuctionEndedEvent.OutputObject
    >;
    AuctionEnded: TypedContractEvent<
      AuctionEndedEvent.InputTuple,
      AuctionEndedEvent.OutputTuple,
      AuctionEndedEvent.OutputObject
    >;

    "BidPlaced(uint256,address,uint256)": TypedContractEvent<
      BidPlacedEvent.InputTuple,
      BidPlacedEvent.OutputTuple,
      BidPlacedEvent.OutputObject
    >;
    BidPlaced: TypedContractEvent<
      BidPlacedEvent.InputTuple,
      BidPlacedEvent.OutputTuple,
      BidPlacedEvent.OutputObject
    >;

    "EmergencyTokenWithdrawal(address,address,uint256)": TypedContractEvent<
      EmergencyTokenWithdrawalEvent.InputTuple,
      EmergencyTokenWithdrawalEvent.OutputTuple,
      EmergencyTokenWithdrawalEvent.OutputObject
    >;
    EmergencyTokenWithdrawal: TypedContractEvent<
      EmergencyTokenWithdrawalEvent.InputTuple,
      EmergencyTokenWithdrawalEvent.OutputTuple,
      EmergencyTokenWithdrawalEvent.OutputObject
    >;

    "EmergencyWithdrawal(address,uint256)": TypedContractEvent<
      EmergencyWithdrawalEvent.InputTuple,
      EmergencyWithdrawalEvent.OutputTuple,
      EmergencyWithdrawalEvent.OutputObject
    >;
    EmergencyWithdrawal: TypedContractEvent<
      EmergencyWithdrawalEvent.InputTuple,
      EmergencyWithdrawalEvent.OutputTuple,
      EmergencyWithdrawalEvent.OutputObject
    >;

    "ListingFeeUpdated(uint256)": TypedContractEvent<
      ListingFeeUpdatedEvent.InputTuple,
      ListingFeeUpdatedEvent.OutputTuple,
      ListingFeeUpdatedEvent.OutputObject
    >;
    ListingFeeUpdated: TypedContractEvent<
      ListingFeeUpdatedEvent.InputTuple,
      ListingFeeUpdatedEvent.OutputTuple,
      ListingFeeUpdatedEvent.OutputObject
    >;

    "NFTListed(uint256,address,uint256)": TypedContractEvent<
      NFTListedEvent.InputTuple,
      NFTListedEvent.OutputTuple,
      NFTListedEvent.OutputObject
    >;
    NFTListed: TypedContractEvent<
      NFTListedEvent.InputTuple,
      NFTListedEvent.OutputTuple,
      NFTListedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
